{"version":3,"sources":["App.js","registerServiceWorker.js","index.js","logo.svg"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchQueryChangeListener","event","self","assertThisInitialized","console","log","target","value","setState","inputSearchQuery","componentDidMount","pageChangeHandler","state","totalPage","page","pictures","bind","undefined","fetch","then","response","json","j","photos","photo","total","picArray","map","pic","srcPath","farm","server","id","secret","react_default","a","createElement","alt","src","className","logo","type","onChange","placeholder","Button","variant","onClick","size","block","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.068b298f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      pictures: [],\r\n      inputSearchQuery: '',\r\n      page: 1,\r\n      totalPage: 1,\r\n    };\r\n    this.onSearchQueryChangeListener = this.onSearchQueryChangeListener.bind(this);\r\n    this.pageChangeHandler = this.pageChangeHandler.bind(this);\r\n\r\n\r\n  }\r\n\r\n  onSearchQueryChangeListener = (event) => {\r\n    let self = this;\r\n    console.log(\"handle change received value as \" + event.target.value);\r\n    this.setState(\r\n      { inputSearchQuery: event.target.value + \"\" },\r\n      () => { self.componentDidMount() }\r\n    );\r\n\r\n\r\n  }\r\n\r\n  pageChangeHandler = () => {\r\n    console.log(this.state.totalPage);\r\n    console.log(this.state.page);\r\n    if (this.state.totalPage > this.state.page) {\r\n      this.setState({ page: this.state.page + 1 })\r\n      this.componentDidMount()\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.state.inputSearchQuery === null || this.state.inputSearchQuery === undefined || this.state.inputSearchQuery === \"\") {\r\n      this.setState({ pictures: [] });\r\n      return;\r\n    }\r\n    console.log(\"inside mount: \" + this.state.inputSearchQuery);\r\n    fetch('https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=' + process.env.REACT_APP_API_KEY + '&text=' + this.state.inputSearchQuery + '&page=' + this.state.page + '&safe_search(1)&sort=relevance&format=json&nojsoncallback=1')\r\n      .then(function (response) {\r\n        return response.json();\r\n      })\r\n      .then(function (j) {\r\n\r\n        /// j is response from api server in json format\r\n\r\n\r\n        if (j === undefined || j.photos === undefined || j.photos.photo === undefined) {\r\n          this.setState({ totalPage: 1, pictures: [] })\r\n\r\n          return;\r\n\r\n        }\r\n        this.setState({ totalPage: j.photos.total })\r\n        let picArray = j.photos.photo.map((pic) => {\r\n\r\n          var srcPath = 'https://farm' + pic.farm + '.staticflickr.com/' + pic.server + '/' + pic.id + '_' + pic.secret + '.jpg';\r\n\r\n\r\n          return (\r\n\r\n            <img alt=\"pics\" src={srcPath} className=\"IMAGE\" ></img>\r\n          )\r\n\r\n        })\r\n        this.setState({ pictures: picArray });\r\n\r\n      }.bind(this))\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    console.log(\"render function called.\");\r\n\r\n    return (\r\n\r\n      <div className=\"App\">\r\n\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h1 className=\"App-title\">Welcome to Gallery</h1>\r\n        </header>\r\n        <input type=\"text\" className=\"Search-Bar\" value={this.state.inputSearchQuery} onChange={this.onSearchQueryChangeListener} placeholder=\"Search in gallery..\" />\r\n\r\n\r\n        <p className=\"App-intro\">\r\n\r\n          {this.state.pictures}\r\n\r\n        </p>\r\n\r\n\r\n        <Button variant=\"primary\" onClick={this.pageChangeHandler} size=\"lg\" id=\"nextPageButton()\" block>\r\n          Next Page >>\r\n        </Button>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}